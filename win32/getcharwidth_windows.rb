require 'fiddle'
require 'fiddle/import'

module Kernel32
  extend Fiddle::Importer
  dlload 'kernel32'

  typealias 'BOOL', 'int'
  typealias 'SHORT', 'short'
  typealias 'WORD', 'unsigned short'
  typealias 'DWORD', 'unsigned int'
  typealias 'PCONSOLE_SCREEN_BUFFER_INFO', 'CONSOLE_SCREEN_BUFFER_INFO *'
  typealias 'HANDLE', 'void *'

  Struct_CONSOLE_SCREEN_BUFFER_INFO = struct ['SHORT dwSizeX', 'SHORT dwSizeY',
        'SHORT dwCursorPositionX', 'SHORT dwCursorPositionY',
        'WORD wAttributes',
        'SHORT srWindowLeft', 'SHORT srWindowTop', 'SHORT srWindowRight', 'SHORT srWindowBottom',
        'SHORT dwMaximumWindowSizeX', 'SHORT dwMaximumWindowSizeY']

  STD_INPUT_HANDLE = -10
  STD_OUTPUT_HANDLE = -11
  STD_ERROR_HANDLE = -12

  extern 'HANDLE GetStdHandle(DWORD nStdHandle)'
  extern 'HANDLE GetStdHandle(DWORD nStdHandle)'

  extern 'BOOL GetConsoleScreenBufferInfo( HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo)'
end

def get_cursor_pos
  stdout_handle = Kernel32.GetStdHandle(Kernel32::STD_OUTPUT_HANDLE)
  buffer_info = Kernel32::Struct_CONSOLE_SCREEN_BUFFER_INFO.malloc

  if Kernel32.GetConsoleScreenBufferInfo(stdout_handle, buffer_info) == 0
    raise "GetConsoleScreenBufferInfo failed"
  end
  [buffer_info.dwCursorPositionX, buffer_info.dwCursorPositionY]
end

Interval = Struct.new :start, :end, :width
wcwidths = []

last_width = 0
last_start = nil
last_end = nil

[ 0x20...0xD800,
  0xE000...0xFDD0,
  0xFDF0...0xFFFE,
].each do |range|
  range.each do |uc|
    x1,y1 = get_cursor_pos
    print [uc].pack("U".freeze)
    x2,y2 = get_cursor_pos
    puts if x2>=80
    width = x2-x1

    if width != last_width
      if last_start
        wcwidths << Interval.new(last_start, last_end, last_width)
      end

      last_start = uc
      last_width = width
    end
    last_end = uc
  end
end

File.open("windows_wcwidths.inc", "w") do |fd|
  fd.print "\n\n"
  fd.puts "/* sorted list of non-overlapping intervals of non-spacing characters */"
  fd.puts "/* generated by #{__FILE__} */"
  fd.puts "static const struct interval widths[] = {"
  wcwidths.each_with_index do |i, idx|
    fd.puts format("  { %#x, %#x, %d }%s", i.start, i.end, i.width, wcwidths.length==idx+1 ? "" : ",")
  end
  fd.puts "};"
end
